{"home":{"content":"# Lecture 14: Loops and Objects\n---\n\nWelcome to Lecture 14. Here is a brief breakdown of today's class.\n\n#### Learning Objectives\n---\n1. What are loops and how can we use them to handle dynamic data?\n2. What are objects and how are they useful in \"modeling\" real world things in javascript?\n\n#### Final Projects\n---\n\n**Due Monday 29th**: Show HTML/CSS progress on your wireframes.\n\n#### [Notes from Last Class](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_arrays_and_objects)\nClick here to view the notes from last lecture.\n<p></p>\n\n#### Rundown\n---\nOk, game time.\n\n#### [Problems 35-46: Loops](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_8) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD_629_functions_pset_8)\nComplete two problems from this list.\n\n#### [Loops](#loops)\n\n#### [Objects](#objects)\n\n#### [Giphy Example](#giphy-example)\n\n\n\n","idx":0},"title":{"content":"Loops and Objects","idx":1},"desc":{"content":"An introduction to the array and hash table data structures","idx":2},"loops":{"content":"# Loops\n---\n\nLoops are used to run a specific set of code over and over again.\n\n#### [Notes](http://samantha.fewd.us/#fork/mottaquikarim/SI_Week2_JS_Notes) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/SI_Week2_JS_Notes)\n<p></p>\n\n#### Learning Objectives\n---\n\n1. Understand why loops are useful\n2. Employ loops to solve problems\n\n#### Exercises\n---\n\n#### [Problems 35-46: Loops](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_8) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_functions_pset_8)\n**PURPOSE**: Loops practice.\n\n<p></p>\n\n#### Why do we need Loops?\n---\n\nConsider the following:\n\n```js\nconst myArray = [1,2,3,4,5];\n```\n\nHow could we find the average of the values of this array?\n\nPerhaps, we could do this:\n\n```js\nconst total = myArray[0] + \n    myArray[1] + \n    myArray[2] + \n    myArray[3] + \n    myArray[4] );\n\nconst mean = total / myArray.length;\n\nconsole.log( total );\nconsole.log( mean );\n```\n\nNow this would work...to an extent.\n\nTwo problems:\n\n1. What if we added another value to the end of **myArray**? This would make the **total** calculation incorrect.\n2. What if **myArray** actually had 100 elements? This would mean having to add **myArray[0]** + **myArray[1]** + ... + **myArray[99]** by hand! \n\nSo...what can we do?\n\nLet's write our total calculation from above a bit differently:\n\n```js\nlet total = 0;\n\ntotal += myArray[0];\ntotal += myArray[1];\ntotal += myArray[2];\ntotal += myArray[3];\ntotal += myArray[4];\n\nconsole.log( total );\n\n```\n\nWhat's nice about this new approach is that we have **one line** of code that looks **super similar**.\n\nThe only issue are the pesky indices, which go from 1 to 2 to 3, etc.\n\nNow, let's add the following:\n\n```js\nlet total = 0;\nlet index = 0;\n\n// index is 0\ntotal += myArray[index];\nindex += 1;\n\n// index is 1\ntotal += myArray[index];\nindex += 1;\n\n// index is 2\ntotal += myArray[index];\nindex += 1;\n\n// index is 3\ntotal += myArray[index];\nindex += 1;\n\n// index is 4\ntotal += myArray[index];\nindex += 1;\n\nconsole.log( total );\n```\n\nThe code above is logically equivalent to what we had before, but now it's a **more generic expression** of adding values from our array into a running total.\n\nPlus, our lines are **exactly** the same, being repeated 5 times. As it turns out, we can automate this a bit, using the **while** loop:\n\n```js\nlet total = 0;\nlet index = 0;\n\n// we want to stop when\n// index === myArray.length\n// since that means we have reached \n// the end of the array\nwhile( index < myArray.length ) {\n    total += myArray[index];\n    index += 1;\n} // this will stop after 5 iterations\n\n// once the while loop has expired, we \n// can continue running this code\nconst mean = total / myArray.length;\n\nconsole.log( total );\nconsole.log( mean );\n```\n\nThe **for** loop is similar to this as well, with a few syntax differences.\n\n```js\n// we have three conditions here\n\n// the START condition\n// let index = 0\n\n// the END condition\n// index < myArray.length\n\n// the UPDATE condition\n// index += 1\n\n// this ensures that the for loop runs\n// for the duration of the array\n// but that it STOPS when it reaches\n// the end of our array\n\nfor( let index = 0; index < myArray.length; index += 1 ) {\n    total += myArray[index];\n}\n// once the for loop has expired, we \n// can continue running this code\nconst mean = total / myArray.length;\n\nconsole.log( total );\nconsole.log( mean );\n```\n\n ","idx":3},"objects":{"content":"# Objects\n---\n\nObjects are javascript representations of real world things.\n\n#### Learning Objectives\n---\n\n1. Understand how to create objects\n2. Understand use cases for objects\n\n#### Exercises\n---\n\n#### [Problems 47-50: Objects](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_9) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD_629_functions_pset_9)\n#### [Problems 51-60: Objects II](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_10) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD_629_functions_pset_10)\n\n#### Creating an Object\n---\n\nHere's how we would create an object.\n\n```js\nconst Cat = {\n    name: 'Annabelle Lee',\n    isCute: true,\n    age: 10,\n    speak: function() {\n        return \"meow\";\n    }\n};\n\nconsole.log( Cat.name );\nconsole.log( Cat.isCute );\nconsole.log( Cat.speak() );\n```\n\n#### Looping back to Arrays\n---\n\nRemember the **array.length** figure we messed with? Now that we know what objects are, **describe length using object vocabulary**.\n\nMore specifically, note that **arrays** are objects themselves and therefore have properties that are functions. Here are some examples:\n\n```js\nconst arr = [];\n\narr.push(1); // [1]\narr.push(2); // [1,2]\n\nconst last = arr.pop(); // 2\n```\n\nGoogle **[javascript array methods](https://www.google.com/?ion=1&espv=2#q=javascript%20array%20methods)** for a full list of array properties.\n\n#### As it turns out...\n---\n\nStrings, numbers, arrays, functions...they're all objects! And as such, they all have properties and functions associated with them.\n\nFor example:\n\n```js\nconst str = \"Hello\";\nconst thirdChar = str.charAt(2); // 'e'\n\nconst num = 3.15159;\nconst rounded = num.toFixed(2); // 3.15\n```\n\n\n","idx":4},"giphy-example":{"content":"# Giphy Example\n---\n\nTBD. We might just do this together as a class, actually.","idx":5},"__list__":["home","title","desc","loops","objects","giphy-example"]}